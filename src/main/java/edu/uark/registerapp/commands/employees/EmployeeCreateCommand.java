package edu.uark.registerapp.commands.employees;

import java.util.Optional;

import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import edu.uark.registerapp.commands.ResultCommandInterface;
import edu.uark.registerapp.commands.exceptions.ConflictException;
import edu.uark.registerapp.commands.exceptions.UnprocessableEntityException;
import edu.uark.registerapp.models.api.Employee;
import edu.uark.registerapp.models.entities.EmployeeEntity;
import edu.uark.registerapp.models.repositories.EmployeeRepository;

@Service
public class EmployeeCreateCommand implements ResultCommandInterface<Employee> {
	@Override
	public Employee execute() {
		this.validateProperties();

		final EmployeeEntity createdEmployeeEntity = this.createEmployeeEntity();

        // Synchronize information generated by the database upon INSERT.
        this.apiEmployee.setId(createdEmployeeEntity.getId());
        this.apiEmployee.setCreatedOn(createdEmployeeEntity.getCreatedOn());

		return this.apiEmployee;
	}

	// Helper methods    
    private void validateProperties(){
        if(StringUtils.isBlank(this.apiEmployee.getFirstName())){
            throw new UnprocessableEntityException("firstName");
        }
        else if(StringUtils.isBlank(this.apiEmployee.getLastName())){
            throw new UnprocessableEntityException("lastName");
        }
        else if(StringUtils.isBlank(this.apiEmployee.getPassword())){
            throw new UnprocessableEntityException("password");
        }
    }
    
    @Transactional
    private EmployeeEntity createEmployeeEntity(){
        final Optional<EmployeeEntity> queriedEmployeeEntity = 
            this.employeeRepository
                .findByEmployeeId(this.apiEmployee.getEmployeeId());
        if(queriedEmployeeEntity.isPresent()){
            throw new ConflictException("employeeid");
        }
        return this.employeeRepository.save(
            new EmployeeEntity(apiEmployee));
    }

	// Properties
    
    private Employee apiEmployee;
    private Boolean isInitial;
    //is intial employee flag goes here
    /*
    if(isInitial){
        apiEmployee.classification = General Manager;
    }
    */
    public Employee getApiEmployee() {
        return this.apiEmployee;
    }
    public EmployeeCreateCommand setApiEmployee(final Employee apiEmployee) {
        this.apiEmployee = apiEmployee;
        return this;
    }

	@Autowired
	private EmployeeRepository employeeRepository;
}
